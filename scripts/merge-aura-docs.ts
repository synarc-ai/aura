#!/usr/bin/env bun

import { readFile, writeFile, exists } from 'fs/promises';
import { join, dirname } from 'path';

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ AURA –≤ –æ–¥–∏–Ω —Ñ–∞–π–ª
 * —Å–æ–≥–ª–∞—Å–Ω–æ –ø–æ—Ä—è–¥–∫—É, —É–∫–∞–∑–∞–Ω–Ω–æ–º—É –≤ README.md
 * –í–µ—Ä—Å–∏—è –±–µ—Ä—ë—Ç—Å—è –∏–∑ package.json
 */

const V03_DIR = join(import.meta.dir, '..', 'docs', 'aura', 'ru');
const OUTPUT_FILE = join(import.meta.dir, '..', 'docs', 'aura', 'ru', 'full.md');
const PACKAGE_JSON_PATH = join(import.meta.dir, '..', 'package.json');

/**
 * –ü–æ–ª—É—á–∞–µ—Ç –≤–µ—Ä—Å–∏—é –∏–∑ package.json
 */
async function getVersion(): Promise<string> {
  try {
    const packageContent = await readFile(PACKAGE_JSON_PATH, 'utf-8');
    const packageJson = JSON.parse(packageContent);
    return packageJson.version || '0.0.0';
  } catch (error) {
    console.warn('‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å –≤–µ—Ä—Å–∏—é –∏–∑ package.json, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤–µ—Ä—Å–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é');
    return '0.0.0';
  }
}

// –ü–æ—Ä—è–¥–æ–∫ —Ñ–∞–π–ª–æ–≤ —Å–æ–≥–ª–∞—Å–Ω–æ README.md
const FILE_ORDER = [
  // –ß–∞—Å—Ç—å I: –¢–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–∏–µ –û—Å–Ω–æ–≤—ã
  '00-foundations.md',
  '01-universal-principles.md', 
  '02-consciousness-model.md',
  
  // –ß–∞—Å—Ç—å II: –ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –§–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è
  '03-mathematical-framework.md',
  '04-category-theory.md',
  '05-quantum-formalism.md',
  
  // –ß–∞—Å—Ç—å III: –ü—Ä–æ–±–ª–µ–º–Ω—ã–π –ê–Ω–∞–ª–∏–∑
  '06-problem-space.md',
  '07-resilience-analysis.md',
  '08-safety-guarantees.md',
  
  // –ß–∞—Å—Ç—å IV: –°–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—è –†–µ–∞–ª–∏–∑–∞—Ü–∏–∏
  '09-implementation-roadmap.md',
  '10-typescript-architecture.md',
  '11-rust-components.md',
  '12-integration.md',
  
  // –ß–∞—Å—Ç—å V: –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∞—è –†–µ–∞–ª–∏–∑–∞—Ü–∏—è
  'minimal-viable-aura.md',
  'pragmatic-tradeoffs.md',
  'failure-modes.md',
  'benchmarks-realistic.md',
  
  // –ü—Ä–∏–ª–æ–∂–µ–Ω–∏—è
  'A-glossary.md',
  'B-proofs.md',
  'C-benchmarks.md',
  'D-symbols.md',
  'boundary-analysis.md'
];

interface FileInfo {
  path: string;
  content: string;
  title: string;
  exists: boolean;
}

async function readFileContent(filename: string): Promise<FileInfo> {
  const filePath = join(V03_DIR, filename);
  const exists = await checkFileExists(filePath);
  
  if (!exists) {
    console.warn(`‚ö†Ô∏è  –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: ${filename}`);
    return {
      path: filePath,
      content: `# ${filename}\n\n*–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω*\n`,
      title: filename.replace('.md', ''),
      exists: false
    };
  }
  
  try {
    const content = await readFile(filePath, 'utf-8');
    const title = extractTitle(content) || filename.replace('.md', '');
    
    return {
      path: filePath,
      content,
      title,
      exists: true
    };
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞ ${filename}:`, error);
    return {
      path: filePath,
      content: `# ${filename}\n\n*–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞*\n`,
      title: filename.replace('.md', ''),
      exists: false
    };
  }
}

function extractTitle(content: string): string | null {
  const titleMatch = content.match(/^#\s+(.+)$/m);
  return titleMatch ? titleMatch[1].trim() : null;
}

async function checkFileExists(filePath: string): Promise<boolean> {
  try {
    await readFile(filePath);
    return true;
  } catch {
    return false;
  }
}

function generateTableOfContents(files: FileInfo[]): string {
  let toc = '# –°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ\n\n';
  
  const sections = [
    { title: '–ß–∞—Å—Ç—å I: –¢–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–∏–µ –û—Å–Ω–æ–≤—ã', start: 0, end: 3 },
    { title: '–ß–∞—Å—Ç—å II: –ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –§–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è', start: 3, end: 6 },
    { title: '–ß–∞—Å—Ç—å III: –ü—Ä–æ–±–ª–µ–º–Ω—ã–π –ê–Ω–∞–ª–∏–∑', start: 6, end: 9 },
    { title: '–ß–∞—Å—Ç—å IV: –°–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—è –†–µ–∞–ª–∏–∑–∞—Ü–∏–∏', start: 9, end: 13 },
    { title: '–ß–∞—Å—Ç—å V: –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∞—è –†–µ–∞–ª–∏–∑–∞—Ü–∏—è', start: 13, end: 17 },
    { title: '–ü—Ä–∏–ª–æ–∂–µ–Ω–∏—è', start: 17, end: files.length }
  ];
  
  let sectionIndex = 1;
  
  for (const section of sections) {
    if (section.start < files.length) {
      toc += `## ${section.title}\n\n`;
      
      for (let i = section.start; i < Math.min(section.end, files.length); i++) {
        const file = files[i];
        const status = file.exists ? '‚úÖ' : '‚ùå';
        toc += `${sectionIndex}. ${status} [${file.title}](#${file.title.toLowerCase().replace(/\s+/g, '-')})\n`;
        sectionIndex++;
      }
      toc += '\n';
    }
  }
  
  return toc;
}

function generateHeader(version: string): string {
  return `# AURA: –ê–¥–∞–ø—Ç–∏–≤–Ω–∞—è –£–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –†–µ–∑–æ–Ω–∞–Ω—Å–Ω–∞—è –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞
## –í–µ—Ä—Å–∏—è ${version} - –ü–æ–ª–Ω–∞—è –°–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—è

*–≠—Ç–æ—Ç –¥–æ–∫—É–º–µ–Ω—Ç –æ–±—ä–µ–¥–∏–Ω—è–µ—Ç –≤—Å–µ —Ñ–∞–π–ª—ã —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏ AURA v${version} –≤ –µ–¥–∏–Ω—ã–π –¥–æ–∫—É–º–µ–Ω—Ç —Å–æ–≥–ª–∞—Å–Ω–æ –ø–æ—Ä—è–¥–∫—É, —É–∫–∞–∑–∞–Ω–Ω–æ–º—É –≤ README.md*

**–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è:** ${new Date().toLocaleDateString('ru-RU')} (–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ)  

---

`;
}

async function main() {
  // –ü–æ–ª—É—á–∞–µ–º –≤–µ—Ä—Å–∏—é –∏–∑ package.json
  const version = await getVersion();
  console.log(`üöÄ –ù–∞—á–∏–Ω–∞—é –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ AURA v${version}...\n`);
  
  // –ß–∏—Ç–∞–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã
  const files: FileInfo[] = [];
  
  for (const filename of FILE_ORDER) {
    console.log(`üìñ –ß–∏—Ç–∞—é ${filename}...`);
    const fileInfo = await readFileContent(filename);
    files.push(fileInfo);
    
    if (fileInfo.exists) {
      console.log(`   ‚úÖ ${fileInfo.title}`);
    } else {
      console.log(`   ‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω`);
    }
  }
  
  console.log('\nüìù –°–æ–∑–¥–∞—é –æ–±—ä–µ–¥–∏–Ω—ë–Ω–Ω—ã–π –¥–æ–∫—É–º–µ–Ω—Ç...');
  
  // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
  let content = generateHeader(version);
  content += generateTableOfContents(files);
  content += '\n---\n\n';
  
  // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∫–∞–∂–¥–æ–≥–æ —Ñ–∞–π–ª–∞
  for (let i = 0; i < files.length; i++) {
    const file = files[i];
    const sectionNumber = i + 1;
    
    content += `\n\n<!-- ===== ${file.title} ===== -->\n\n`;
    content += file.content;
    
    if (i < files.length - 1) {
      content += '\n\n---\n';
    }
  }
  
  // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
  await writeFile(OUTPUT_FILE, content, 'utf-8');
  
  console.log(`\n‚úÖ –î–æ–∫—É–º–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω: ${OUTPUT_FILE}`);
  console.log(`üìä –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: ${(content.length / 1024 / 1024).toFixed(2)} MB`);
  console.log(`üìÑ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∏–º–≤–æ–ª–æ–≤: ${content.length.toLocaleString('ru-RU')}`);
  
  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
  const existingFiles = files.filter(f => f.exists).length;
  const missingFiles = files.length - existingFiles;
  
  console.log(`\nüìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:`);
  console.log(`   ‚úÖ –£—Å–ø–µ—à–Ω–æ: ${existingFiles}/${files.length} —Ñ–∞–π–ª–æ–≤`);
  if (missingFiles > 0) {
    console.log(`   ‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç: ${missingFiles} —Ñ–∞–π–ª–æ–≤`);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫—Ä–∏–ø—Ç
if (import.meta.main) {
  main().catch(error => {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
    process.exit(1);
  });
}
